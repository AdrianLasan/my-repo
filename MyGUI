package TopMod;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;


public class MYGUI extends JFrame {
    private JTextArea logArea;
    private JButton selectFileButton;
    private JButton addStopWordButton;
    private JButton compareFilesButton;
    private JButton clearButton;
    private JTextField stopWordField;
    private File[] selectedFiles;
    private Set<String> stopwords;
    private final String stopwordsPath = "filesPath";
    private int fileIndex = 0;

    public MYGUI() {
        setTitle("MYGUI");
        setSize(1000, 1000);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        Icon clear_icon = new ImageIcon("C:\\Users\\adria\\Downloads\\icons8-bin-48.png");
        Icon compare_icon = new ImageIcon("C:\\Users\\adria\\Downloads\\icons8-compare-48.png");

        // Panel to hold buttons and text field
        JPanel buttonPanel = new JPanel(new FlowLayout());
        selectFileButton = new JButton("Select File " + (fileIndex + 1));
        selectFileButton.addActionListener(new SelectFileActionListener());
        buttonPanel.add(selectFileButton);

        stopWordField = new JTextField(25);
        addStopWordButton = new JButton("Add Stop Word");
        addStopWordButton.addActionListener(new AddStopWordActionListener());
        buttonPanel.add(stopWordField);
        buttonPanel.add(addStopWordButton);

        compareFilesButton = new JButton(compare_icon);
        compareFilesButton.addActionListener(new CompareFilesActionListener());
        buttonPanel.add(compareFilesButton);

        clearButton = new JButton(clear_icon);
        clearButton.addActionListener(new ClearActionListener());
        buttonPanel.add(clearButton);

        // Text area to display logs
        logArea = new JTextArea();
        logArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(logArea);
        add(buttonPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);

        setVisible(true);
    }

    private class SelectFileActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setMultiSelectionEnabled(false);
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                if (fileIndex == 0) {
                    selectedFiles = new File[2];
                }
                selectedFiles[fileIndex] = selectedFile;
                logArea.append("Selected file " + (fileIndex + 1) + ": " + selectedFile.getName() + "\n");
                fileIndex++;
                if (fileIndex < 2) {
                    selectFileButton.setText("Select File " + (fileIndex + 1));
                } else {
                    selectFileButton.setEnabled(false);
                }
            }
        }
    }

    private class AddStopWordActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String newStopWord = stopWordField.getText().trim();
            if (!newStopWord.isEmpty()) {
                addStopWord(newStopWord);
                stopWordField.setText("");
            }
        }
    }

    private class CompareFilesActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            if (selectedFiles != null && selectedFiles.length == 2) {
                compareFiles(selectedFiles[0], selectedFiles[1]);
            } else {
                JOptionPane.showMessageDialog(null, "Please select 2 files.");
            }
        }
    }

    private class ClearActionListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            selectedFiles = null;
            fileIndex = 0;
            selectFileButton.setText("Select File " + (fileIndex + 1));
            selectFileButton.setEnabled(true);
            logArea.setText("");
            clearStopWords();
        }
    }

    private void loadStopwords(String filePath) {
        stopwords = new HashSet<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                stopwords.add(line.trim());
            }
        } catch (IOException e) {
            e.printStackTrace();
            logArea.append("Error loading stopwords file.\n");
        }
    }

    private void addStopWord(String newStopWord) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(stopwordsPath, true))) {
            writer.write(newStopWord);
            writer.newLine();
            writer.flush();
            logArea.append("Stop word added: " + newStopWord + "\n");
        } catch (IOException e) {
            e.printStackTrace();
            logArea.append("Error adding stop word.\n");
        }
    }

    private void clearStopWords() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(stopwordsPath))) {
            writer.write(""); // Clear the file content
            writer.flush();
            logArea.append("Stop words cleared.\n");
        } catch (IOException e) {
            e.printStackTrace();
            logArea.append("Error clearing stop words.\n");
        }
    }

    private void compareFiles(File file1, File file2) {
        loadStopwords(stopwordsPath);

        try (BufferedReader reader1 = new BufferedReader(new FileReader(file1));
             BufferedReader reader2 = new BufferedReader(new FileReader(file2))) {
            Set<String> words1 = preprocessText(reader1.readLine());
            Set<String> words2 = preprocessText(reader2.readLine());

            Set<String> commonWords = new HashSet<>(words1);
            commonWords.retainAll(words2);

            // Filter out stop words from common words
            commonWords.removeIf(stopwords::contains);

            double percentageMatch = (double) commonWords.size() / Math.min(words1.size(), words2.size()) * 100;
            logArea.append(String.format("Percentage of matching words (excluding stop words): %.2f%%\n", percentageMatch));

            // Display results in a tab-separated format with column headers
            logArea.append("File 1\tFile 2\tPercentage\tWords Matched\n");
            logArea.append(String.format("%s\t%s\t%.2f%%\t", file1.getName(), file2.getName(), percentageMatch));
            for (String word : commonWords) {
                logArea.append(word + "\n\t\t\t\t");
            }
            logArea.append("\n");
        } catch (IOException ex) {
            ex.printStackTrace();
            logArea.append("Error comparing files.\n");
        }
    }

    private Set<String> preprocessText(String text) {
        Set<String> words = new HashSet<>();
        if (text != null) {
            for (String word : text.toLowerCase().split("\\s+")) {
                words.add(word);
            }
        }
        return words;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MYGUI::new);
    }
}
